#compdef -P pip[0-9.]#

# Setup $python, based on pip version from word[1].
# Must get done early, otherwise $words might have been changed already.
local python pip
pip=${words[1]}
python=${${pip}/pip/python}
[[ $python == $pip ]] && python=python

local -a general_options
general_options=(
  '(* : -)'{-h,--help}"[show help]"
  "--isolated[run pip in an isolated mode, ignoring environment variables and user configuration]"
  \*{-v,--verbose}"[give more output]"
  {-V,--version}"[show version and exit]"
  {-q,--quiet}"[give less output]"
  "--log=[path to a verbose appending log]:file:_files"
  "--no-input[disable prompting for input]"
  "--proxy=[specify a proxy in the form user:passwd@proxy.server:port]:proxy"
  "--retries=[maximum number of retries each connection should attempt]:retries"
  "--timeout=[set the socket timeout]:second"
  "--exists-action=[default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup]:action"
  "--trusted-host=[mark this host or host:port pair as trusted, even though it does not have valid or any https]:host"
  "--cert=[path to alternate CA bundle]:path"

  "--client-cert=[path to ssl client certificate]"
  "--cache-dir=[store the cache data in DIR]:directory:_directories"
  "--no-cache-dir[disable the cache]"
  "--disable-pip-version-check[don't periodically check pypi to determine whether a new version of pip is available for download]"
  "--no-color[suppress colored output]"
  "--no-python-version-warning[silence deprecation warnings for upcoming unsupported pythons]"
  "--use-feature=[enable new functionality, that may be backward incompatible]:feature"
  "--use-deprecated=[enable deprecated functionality, that will be removed in the future]:feature"
)

_requirements_file() {
  # Prefer requirement* and *.txt pattern. This falls back to "all files",
  # according to the file-patterns style.
  _wanted files expl file _files -g 'requirement*(-.)' -g '*.txt(-.)' "$@" -
}

_constraints_file() {
  # Prefer constraint* and *.txt pattern. This falls back to "all files",
  # according to the file-patterns style.
  _wanted files expl file _files -g 'constraint*(-.)' -g '*.txt(-.)' "$@" -
}

_upgrade_strategy() {
  _values 'upgrade-strategy' \
    'only-if-needed[dependencies are upgraded only when they do not satisfy the requirements of the upgraded package(s)]' \
    'eager[dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s)]'
}

_progress_bar() {
  compadd off on ascii pretty emoji
}

_output_format() {
  compadd columns freeze json
}

typeset -A opt_args
local curcontext="$curcontext" state line ret=1
curcontext="${curcontext%:*}-$words[2]:"

_arguments -C \
  ':subcommand:->subcommand' \
  $general_options \
  '*::options:->options' && ret=0

case $state in
  subcommand)
    local -a subcommands
    subcommands=(
      "install:install packages"
      "download:download packages"
      "uninstall:uninstall packages"
      "freeze:output installed packages in requirements format"
      "list:list installed packages"
      "show:show information about installed packages"
      "check:verify installed packages have compatible dependencies"
      "config:manage local and global configuration"
      "search:search pypi for packages"
      "cache:inspect and manage pip's wheel cache"
      "wheel:build wheels from your requirements"
      "hash:compute hashes of package archives"
      "completion:a helper command used for command completion"
      "debug:show information useful for debugging"
      "help:show help for commands"
    )

    _describe -t subcommands 'pip subcommand' subcommands && ret=0
  ;;

  options)
    local -a args
    args=(
      $general_options
    )

    local -a package_index_options
    package_index_options=(
      {-i,--index-url=}"[base URL of Python Package Index]:URL"
      "--extra-index-url=[extra URLs of package indexes to use in addition to --index-url]:URL"
      "--no-index[ignore package index (only looking at --find-links URLs instead)]"
      {-f,--find-links=}"[URL to look for packages at]:URL"
    )

    case $words[1] in
      install | download)
        args+=(
          {-r,--requirement=}"[install from the given requirements file]:requirements file:_requirements_file"
          {-c,--constraint=}"[constrain versions using the given constraints file]:constraints file:_constraints_file"
          "--no-deps[don't install package dependencies]"
          "--pre[include pre-release and development versions]"
          {-e,--editable=}"[install a project in editable mode]:directory or VCS+REPOS_URL[@REV]#egg=PACKAGE:_files -/"
          {-t,--target=}"[install packages into DIR]:directory:_directories"
          "--platform=[only use wheels compatible with PLATFORM]"
          "--python-version=[the python interpreter version to use for wheel and Requires-Python compatibility checks]"
          "--implementation=[only use wheels compatible with python implementation IMPLEMENTATION]"
          "--abi=[only use wheels compatible with python abi ABI]"
          "--user[install to the python user install directory for your platform]"
          "--root=[install everything relative to this alternate root directory]:directory:_directories"
          "--src=[directory to check out editable projects into]:directory:_directories"
          {-U,--upgrade}"[upgrade all specified packages to the newest available version]"
          "--upgrade-strategy=[determines how dependency upgrading should be handled]:upgrade strategy:_upgrade_strategy"
          "--force-reinstall[reinstall all packages even if they are already up-to-date]"
          {-I,--ignore-installed}"[ignore the installed packages, overwriting them]"
          "--ignore-requires-python[ignore the Requires-Python information]"
          "--no-build-isolation[disable isolation when building a modern source distribution]"
          "--use-pep517[use pep 517 for building source distributions]"
          "--install-option=[extra arguments to be supplied to the setup.py install command]:options"
          "--global-option=[extra global options to be supplied to the setup.py call before the install command]:options"
          "--compile[compile python source files to bytecode]"
          "--no-compile[do not compile python source files to bytecode]"
          "--no-warn-script-location[do not warn when installing scripts outside PATH]"
          "--no-warn-conflicts[do not warn about broken dependencies]"
          "--no-binary=[do not use binary packages]"
          "--only-binary=[do not use source packages]"
          "--prefer-binary[prefer older binary packages over newer source packages]"
          "--require-hashes[require a hash to check each requirement against, for repeatable installs]"
          "--progress-bar=[Specify type of progress to be displayed]:progress bar:_progress_bar"
          "--no-clean[don't clean up build directories]"
          $package_index_options
        )
      ;;

      uninstall)
        args+=(
          {-r,--requirement=}"[install all the packages listed in the given requirements file]::requirements file:_requirements_file"
          {-y,--yes}"[don't ask for confirmation of uninstall deletions]:installed package"
        )
      ;;

      freeze)
        args+=(
          {-r,--requirement=}"[install all the packages listed in the given requirements file]::requirements file:_requirements_file"
          {-f,--find-links=}"[URL to look for packages at]:URL"
          {-l,--local}"[if in a virtualenv that has global access, do not list globally-installed packages]"
          "--user[only output packages installed in user-site]"
          "--path=[restrict to the specified installation path for listing packages]"
          "--all[do not skip these packages in the output: wheel, pip, distribute, setuptools]"
          "--exclude-editable[exclude editable package from output]"
          "--exclude=[exclude specified package from the output]"
        )
      ;;

      list)
        args+=(
          {-o,--outdated}"[list outdated packages (excluding editables)]"
          {-u,--uptodated}"[list uptodated packages (excluding editables)]"
          {-e,--editable}"[list editable projects]"
          {-l,--local}"[if in a virtualenv that has global access, do not list globally-installed packages]"
          "--user[only output packages installed in user-site]"
          "--path=[restrict to the specified installation path for listing packages]"
          "--pre[include pre-release and development versions]"
          "--format=[select the output format]:output format:_output_format"
          "--not-required[list packages that are not dependencies of installed packages]"
          "--exclude-editable[exclude editable package from output]"
          "--include-editable[include editable package from output]"
          "--exclude=[exclude specified package from the output]"
          $package_index_options
        )
      ;;

      show)
        args+=(
          {-f,--files}"[show the full list of installed files for each package]:installed package"
        )
      ;;

      config)
        args+=(
          "--editor=[editor to use to edit the file]editor"
          "--global[use the system-wide configuration file only]global"
          "--user[use the user configuration file only]user"
          "--site[use the current environment configuration file only]site"
        )
      ;;

      search)
        args+=(
          "--index[base URL of Python Package Index]:URL"
        )
      ;;

      wheel)
        args+=(
          {-w,--wheel-dir=}"[build wheels into DIR, where the default is '<cwd>/wheelhouse']:directory:_directories"
          "--use-wheel[find and prefer wheel archives when searching indexes and find-links locations]"
          "--build-option=[extra arguments to be supplied to 'setup.py bdist_wheel']:options"
          {-r,--requirement=}"[install all the packages listed in the given requirements file]::requirements file:_requirements_file"
          {-c,--constraint=}"[constrain versions using the given constraints file]:constraints file:_constraints_file"
          "--download-cache=[cache downloaded packages in DIR]:directory:_directories"
          "--no-deps[don't install package dependencies]"
          {-b,--build=}"[directory to unpack packages into and build in]:directory:_directories"
          "--global-option=[extra global options to be supplied to the setup.py call before the 'bdist_wheel' command]:options"
          "--pre[include pre-release and development versions]"
          "--no-clean[don't clean up build directories]"
          $package_index_options
        )
      ;;
    esac

    _arguments $args && ret=0
  ;;
esac

return ret
