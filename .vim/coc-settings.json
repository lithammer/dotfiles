{
  // Native settings:
  "codeLens.enable": true,
  "codeLens.position": "eol", // "top" | "eol" | "right_align"
  "diagnostic.errorSign": "E",
  "diagnostic.hintSign": "!",
  "diagnostic.infoSign": "!",
  "diagnostic.warningSign": "W",
  "diagnostic.virtualText": true,
  "diagnostic.virtualTextPrefix": "■ ",
  "diagnostic.virtualTextCurrentLineOnly": false,
  "coc.preferences.formatOnSaveFiletypes": [
    "c",
    "cpp",
    "crystal",
    "css",
    "fish",
    "go",
    "javascript",
    "javascriptreact",
    "json",
    "jsonc",
    "lua",
    "nim",
    "python",
    "rust",
    "sh",
    "sql",
    "svelte",
    "terraform",
    "typescript",
    "typescriptreact"
  ],
  "coc.preferences.willSaveHandlerTimeout": 5000,
  "semanticTokens.filetypes": ["*"],
  // Plugin settings:
  "diagnostic-languageserver.formatters": {
    "black": {
      "rootPatterns": ["pyproject.toml"]
    },
    "lua-format": {
      "requiredFiles": [".lua-format"],
      "rootPatterns": [".lua-format"]
    },
    "nimpretty": {
      "command": "nimpretty",
      "args": ["--out:/dev/stdout", "%tempfile"]
    },
    "pg_format": {
      "command": "pg_format",
      "args": ["-B", "-L"]
    },
    "shfmt": {
      // Upstream includes "-i 2".
      // https://github.com/iamcco/coc-diagnostic/pull/119
      "args": ["-filename", "%filepath"]
    },
    "stylua": {
      "command": "stylua",
      "args": ["-"],
      "rootPatterns": ["stylua.toml"],
      "requiredFiles": ["stylua.toml", ".stylua.toml"]
    }
  },
  "diagnostic-languageserver.filetypes": {
    "go": "golangci-lint",
    "lua": ["selene", "luacheck"],
    "markdown": ["markdownlint"],
    // "python": ["pylint"],
    "sh": "shellcheck",
    "vim": "vint",
    "yaml": "yamllint"
  },
  "diagnostic-languageserver.formatFiletypes": {
    "fish": "fish_indent",
    "lua": ["lua-format", "stylua"],
    "nim": "nimpretty",
    "python": ["isort", "black"],
    "sh": "shfmt",
    "sql": "pg_format"
  },
  "diagnostic-languageserver.linters": {
    "mypy": {
      "args": [
        "--follow-imports=silent",
        "--hide-error-codes",
        "--hide-error-context",
        "--no-color-output",
        "--no-error-summary",
        "--no-pretty",
        "--show-column-numbers",
        "%file"
      ]
    },
    "pylint": {
      "rootPatterns": [
        "pylintrc",
        ".pylintrc",
        "pyproject.toml",
        "setup.cfg",
        ".git"
      ]
    },
    "selene": {
      "command": "selene",
      "args": ["--display-style", "quiet", "-"],
      "sourceName": "selene",
      "formatPattern": [
        "^[^:]+:(\\d+):(\\d+):\\s(\\w+)\\[\\w+\\]:\\s(.*)$",
        {
          "line": 1,
          "column": 2,
          "endLine": 1,
          "endColumn": 2,
          "security": 3,
          "message": 4
        }
      ],
      "rootPatterns": ["selene.toml"],
      "requiredFiles": ["selene.toml"],
      "debounce": 100,
      "securities": {
        "error": "error",
        "warning": "warning"
      }
    },
    "shellcheck": {
      "args": ["--format", "json1", "--external-sources", "-"]
    }
  },
  "diagnostic-languageserver.mergeConfig": true,
  "git.addedSign.text": "│",
  "git.changedSign.text": "│",
  "go.goplsOptions": {
    "gofumpt": true,
    "semanticTokens": true,
    "staticcheck": true,
    "usePlaceholders": true
  },
  "highlight.colorNames.enable": false,
  "highlight.document.enable": false,
  "htmldjango.djlint.enableLint": true,
  "htmldjango.djlint.lintOnChange": false,
  "languageserver": {
    "awk": {
      "command": "awk-language-server",
      "args": [],
      "filetypes": ["awk"]
    },
    "crystalline": {
      "command": "crystalline",
      "filetypes": ["crystal"],
      "rootPatterns": ["shard.yml"]
    },
    "nimlsp": {
      "command": "nimlsp",
      "filetypes": ["nim"],
      "rootPatterns": ["*.nimble"]
    },
    "terraform-ls": {
      "command": "terraform-ls",
      "args": ["serve"],
      "filetypes": ["terraform"],
      "rootPatterns": [".terraform"]
    },
    "tflint": {
      "command": "tflint",
      "args": ["--langserver"],
      "filetypes": ["terraform"],
      "rootPatterns": [".tflint.hcl", ".terraform"]
    }
  },
  "Lua.completion.callSnippet": "Replace",
  "Lua.diagnostics.disable": ["undefined-global"],
  "Lua.runtime.version": "LuaJIT",
  "Lua.telemetry.enable": false,
  "groovy.java.home": "/usr/local/opt/openjdk",
  "prettier.statusItemText": "",
  "pyright.disableDiagnostics": true,
  "pyright.organizeimports.provider": "isort",
  "python.formatting.provider": "black",
  "python.analysis.diagnosticSeverityOverrides": {
    "reportDuplicateImport": "information",
    "reportUnusedCallResult": "information",
    "reportUnusedClass": "information",
    "reportUnusedFunction": "information",
    "reportUnusedImport": "information",
    "reportUnusedVariable": "information"
  },
  "python.linting.flake8Enabled": true,
  "python.linting.mypyEnabled": true,
  "svelte.enable-ts-plugin": true,
  "rust-analyzer.cargo.runBuildScripts": true,
  "rust-analyzer.checkOnSave.command": "clippy",
  "rust-analyzer.completion.postfix.enable": false,
  "rust-analyzer.experimental.procAttrMacros": true,
  "rust-analyzer.inlayHints.chainingHints": true,
  "rust-analyzer.inlayHints.chainingHintsSeparator": "<- ",
  "rust-analyzer.inlayHints.enable": true,
  "rust-analyzer.inlayHints.typeHints": true,
  "rust-analyzer.inlayHints.typeHintsSeparator": "=> ",
  "rust-analyzer.procMacro.enable": true,
  "solargraph.checkGemVersion": false,
  "solargraph.diagnostics": true,
  "solargraph.formatting": true,
  "sumneko-lua.enableNvimLuaDev": true,
  "typescript.referencesCodeLens.enable": false, // Too noisy.
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.variableTypes.enabled": true,
  "xml.java.home": "/usr/local/opt/openjdk",
  "yaml.format.enable": true
}
