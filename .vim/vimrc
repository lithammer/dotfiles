scriptencoding utf-8

function! s:stdpath(what) abort
  return has('nvim') ? stdpath(a:what) : expand('~/.vim')
endfunction

function! PackagerInit() abort
  packadd vim-packager
  command! -nargs=+ -bar Plug call packager#add(<args>)
  call packager#init()

  Plug 'kristijanhusak/vim-packager', {'type': 'opt'}

  Plug 'fladson/vim-kitty'
  Plug 'jeetsukumaran/vim-pythonsense'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'mhinz/vim-grepper'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'nvim-treesitter/nvim-treesitter', {'type': 'opt'}
  Plug 'romainl/vim-cool'
  Plug 'romainl/vim-qf'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-vinegar'
  " Plug 'wellle/targets.vim'

  Plug 'github/copilot.vim', {'type': 'opt'}

  Plug 'nvim-lua/plenary.nvim', {'type': 'opt'}
  Plug 'sindrets/diffview.nvim', {'type': 'opt'}

  Plug 'lifepillar/vim-colortemplate'
  Plug 'andreypopp/vim-colors-plain'
  " Plug 'arzg/vim-corvine'
  Plug 'axvr/photon.vim'
  Plug 'axvr/raider.vim'
  Plug 'catppuccin/nvim', {'name': 'catppuccin', 'type': 'opt'}
  " Plug 'cormacrelf/vim-colors-github'
  " Plug 'chriskempson/base16-vim'
  " Plug 'franbach/miramare'
  " Plug 'gruvbox-community/gruvbox'
  Plug 'habamax/vim-alchemist'
  " Plug 'Iron-E/nvim-highlite'
  " Plug 'junegunn/seoul256.vim'
  Plug 'lifepillar/vim-gruvbox8'
  " Plug 'lifepillar/vim-solarized8'
  " Plug 'mhinz/vim-janah'
  " Plug 'morhetz/gruvbox'
  Plug 'nanotech/jellybeans.vim'
  Plug 'navarasu/onedark.nvim'
  Plug 'rebelot/kanagawa.nvim'
  Plug 'romainl/Apprentice'
  Plug 'sainnhe/gruvbox-material'
  Plug 'sainnhe/sonokai'
  Plug 'srcery-colors/srcery-vim'
  Plug 'VonHeikemen/little-wonder'
  " Plug 'w0ng/vim-hybrid'
  Plug 'wuelnerdotexe/vim-enfocado'
endfunction

command! PackagerInstall call PackagerInit() | call packager#install()
command! -bang PackagerUpdate call PackagerInit() | call packager#update({'force_hooks': '<bang>'})
command! PackagerClean call PackagerInit() | call packager#clean()
command! PackagerStatus call PackagerInit() | call packager#status()

set tabstop=4
packadd vim-polyglot

let g:netrw_altfile = 1
let g:netrw_liststyle = 3

set termguicolors
set background=dark

augroup colorschemeload
  autocmd!
  autocmd ColorScheme alchemist call s:alchemist_customize()
  autocmd ColorScheme plain highlight link CocUnusedHighlight NonText
  autocmd ColorScheme sonokai call s:sonokai_customize()
augroup END

if exists('$WEZTERM_EXECUTABLE')
  " let g:kanagawa2_keyword_italics = 0
  colorscheme kanagawa2
  highlight link CocSemVariable Normal
" elseif $TERM_PROGRAM ==? 'iTerm.app' && strftime('%H') >= 21
elseif $TERM_PROGRAM ==? 'iTerm.app'
  colorscheme plain
else
  function! s:sonokai_customize() abort
    " highlight link CocRustChainingHint Conceal
    " highlight link CocRustTypeHint Conceal
    highlight link CocHintSign Conceal
  endfunction

  let g:sonokai_style = 'shusia'
  let g:sonokai_diagnostic_text_highlight = 1
  let g:sonokai_diagnostic_virtual_text = 'colored'
  let g:sonokai_better_performance = 1

  " if has('nvim')
  "   lua <<EOF
  "   require('kanagawa').setup({ keywordStyle = 'NONE' })
" EOF
  "   colorscheme kanagawa
  " else
  "   packadd! sonokai
  "   colorscheme sonokai
  " endif

  " let g:kanagawa2_keyword_italics = 0
  " colorscheme kanagawa2

  " packadd! sonokai
  " colorscheme sonokai

  " colorscheme gruvbox8

  function! s:alchemist_customize() abort
    highlight CocGitAddedSign ctermbg=242 guifg=#87af87 guibg=#1c1c1c
    highlight CocGitChangeRemovedSign ctermbg=242 guifg=#d7af5f guibg=#1c1c1c
    highlight CocGitChangedSign ctermbg=242 guifg=#8787af guibg=#1c1c1c
    highlight CocGitRemovedSign ctermbg=242 guifg=#d75f5f guibg=#1c1c1c

    highlight link CocErrorSign DiagnosticSignError
    highlight link CocErrorVirtualText DiagnosticVirtualTextError
    highlight link CocHintSign DiagnosticSignHint
    highlight link CocHintVirtualText DiagnosticVirtualTextHint
    highlight link CocInfoSign DiagnosticSignInfo
    highlight link CocInfoVirtualText DiagnosticVirtualTextInfo
    highlight link CocWarningSign DiagnosticSignWarn
    highlight link CocWarningVirtualText DiagnosticVirtualTextWarn

    " highlight link CocHintSign Conceal
    " highlight link CocHintSign CocCodeLens

    highlight link CocRustChainingHint CocCodeLens
    highlight link CocRustTypeHint CocCodeLens

    hi VertSplit guibg=NONE ctermbg=NONE
  endfunction

  let g:alchemist_transp_bg = v:true
  " colorscheme alchemist

  let g:gruvbox_material_better_performance = 1
  let g:gruvbox_material_diagnostic_text_highlight = 1
  " let g:gruvbox_material_disable_italic_comment = 1
  let g:gruvbox_material_foreground = 'original'
  colorscheme sonokai
endif

set list listchars=tab:\|\ ,trail:·,extends:>,precedes:<,nbsp:+
set fillchars+=vert:│,fold:·,diff:╱
set title
set nowrapscan

set statusline=%<%f\ %h%m%r
set statusline+=%{get(g:,'coc_status','')}
set statusline+=%{gutentags#statusline(\"\\ua0[\",']')}
set statusline+=%=%-14.(%l,%c%V%)\ %P

set ignorecase smartcase
if exists('&inccommand')
  set inccommand=split
endif

if has('linebreak')
  set linebreak
endif

if exists('+breakindent')
  set breakindent
  set breakindentopt=shift:2
  let &showbreak = "\u21AA "
endif

set formatoptions+=n
set formatoptions+=1
if has('patch-7.3.541')
  set formatoptions+=j
endif

if has('nvim-0.3.2') || has('patch-8.1.0360')
  set diffopt+=algorithm:histogram,indent-heuristic
endif

let &directory = s:stdpath('data') . '/swap//'
if !isdirectory(&directory)
  call mkdir(&directory)
endif

let &backupdir = s:stdpath('data') . '/backup'
if !isdirectory(&backupdir)
  call mkdir(&backupdir)
endif

if has('persistent_undo')
  set undofile
  let &undodir = s:stdpath('data') . '/undo'
  if !isdirectory(&undodir)
    call mkdir(&undodir)
  endif
endif

set wildmode=longest:full,full
if exists('+wildignorecase')
  set wildignorecase
end

set grepformat^=%f:%l:%c:%m
if executable('rg')
  let &grepprg = 'rg --vimgrep'
else
  let &grepprg = 'grep -Inr $* /dev/null'
endif

command! -bar -nargs=+ -complete=file_in_path Grep silent! grep! <args> | redraw!

" :h last-position-jump
augroup lastpositionjump
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif
augroup END

if exists('+cursorline')
  augroup cursorLine
    autocmd!
    autocmd VimEnter,InsertLeave,BufEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave,InsertEnter,BufLeave,BufWinLeave * setlocal nocursorline
  augroup END
endif

" Copy visual region to clipboard.
vnoremap <C-c> "*y"
" vim-gutentags {{{1
if executable('ctags')
  " let g:gutentags_cache_dir = s:stdpath('data') . '/tags'
  let g:gutentags_file_list_command = {
        \ 'markers': {
        \   '.git': 'git ls-files',
        \ }
        \}
endif
" vim-grepper {{{1
let g:grepper = {
      \ 'tools': ['git', 'rg', 'grep', 'semgrep'],
      \ 'semgrep': {
      \   'grepprg': 'semgrep -q --vim',
      \   'grepformat': '%f:%l:%c:%.:%.:%m',
      \ }
      \}
nnoremap <leader>g :Grepper -noswitch -jump<CR>
" coc.nvim {{{1
" if $TERM_PROGRAM ==? 'iTerm.app'
"   let g:coc_disable_transparent_cursor = 1
" endif
let g:coc_disable_transparent_cursor = 1
let g:coc_config_home = expand('~/.vim')
let g:coc_global_extensions = [
      \ '@yaegassy/coc-ansible',
      \ '@yaegassy/coc-nginx',
      \ 'coc-clangd',
      \ 'coc-cmake',
      \ 'coc-css',
      \ 'coc-cssmodules',
      \ 'coc-diagnostic',
      \ 'coc-docker',
      \ 'coc-esbonio',
      \ 'coc-eslint',
      \ 'coc-git',
      \ 'coc-go',
      \ 'coc-highlight',
      \ 'coc-html',
      \ 'coc-htmldjango',
      \ 'coc-java',
      \ 'coc-json',
      \ 'coc-lists',
      \ 'coc-markdownlint',
      \ 'coc-marketplace',
      \ 'coc-prettier',
      \ 'coc-pyright',
      \ 'coc-rust-analyzer',
      \ 'coc-sh',
      \ 'coc-snippets',
      \ 'coc-solargraph',
      \ 'coc-sourcekit',
      \ 'coc-stylelintplus',
      \ 'coc-sumneko-lua',
      \ 'coc-svelte',
      \ 'coc-toml',
      \ 'coc-tsserver',
      \ 'coc-vetur',
      \ 'coc-vimlsp',
      \ 'coc-xml',
      \ 'coc-yaml',
      \ 'coc-yank',
      \ 'coc-zig',
      \]

let g:coc_filetype_map = {
      \ 'Jenkinsfile': 'groovy',
      \ 'yaml.ansible': 'ansible',
      \}

" set formatexpr=CocAction('formatSelected')

" Override omnifunc.
inoremap <silent><expr> <C-x><C-o> coc#refresh()
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gR <Plug>(coc-references)
nmap <silent> gr <Plug>(coc-rename)

nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

xmap ga <Plug>(coc-codeaction-selected)
vmap ga <Plug>(coc-codeaction-selected)
nmap ga <Plug>(coc-codeaction-line)
nmap gA <Plug>(coc-codeaction)
nmap <leader>a <Plug>(coc-codeaction-cursor)
nmap <leader>qf <Plug>(coc-fix-current)
nmap <leader>l <Plug>(coc-codelens-action)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
" nmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

nmap ]c <Plug>(coc-git-nextchunk)
nmap [c <Plug>(coc-git-prevchunk)
nmap ]n <Plug>(coc-git-nextconflict)
nmap [n <Plug>(coc-git-prevconflict)
nmap gs <Plug>(coc-git-chunkinfo)
" nmap gc <Plug>(coc-git-commit)

nnoremap <silent> K :call <SID>show_documentation()<CR>

nnoremap <silent><nowait> <leader>d :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <leader>c :<C-u>CocList commands<cr>
nnoremap <silent><nowait> <leader>o :<C-u>CocList outline<cr>
" nnoremap <silent><nowait> gO :CocOutline<cr>
nnoremap <silent><nowait> <leader>s :<C-u>CocList -I -A symbols<cr>
nnoremap <silent><nowait> <leader>p :<C-u>CocListResume<cr>
nnoremap <silent><nowait> <leader>i :OrganizeImport<cr>
nnoremap <silent><nowait> <leader>h :SwitchSourceHeader<cr>
nnoremap <silent><nowait> <C-p> :CocList files<cr>

nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

command! -nargs=0 Format :call CocActionAsync('format')
command! -nargs=? Fold :call CocAction('fold', <f-args>)
command! -nargs=0 OrganizeImport :call CocAction('runCommand', 'editor.action.organizeImport')
command! -nargs=0 SwitchSourceHeader :CocCommand clangd.switchSourceHeader

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

augroup coc_highlight
  autocmd!
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

augroup coc_signature_help
  autocmd!
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

nmap ]q <Plug>(qf_qf_next)
nmap [q <Plug>(qf_qf_previous)
nmap ]l <Plug>(qf_loc_next)
nmap [l <Plug>(qf_loc_previous)
" ----- vim: set foldenable foldmethod=marker foldlevel=0:
